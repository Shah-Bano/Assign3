{
  "data": [
    {
      "id": 2,
      "documentId": "r0fp0pmnhb8vnwibz6l7s8j1",
      "postTitle": "Assignment 1 Documentation",
      "blogContent": "Documentation for Recipe App\n\nStarting off with my JSON:\n\nI have the title function which handles the name of the recipe, then the content split into ingredients and instructions, both are arrays then I have the date, indicating when it was added.\n\nYou can see these in this example:  \n```json  \n{  \n    \"title\": \"Quick Oreo Ice Cream\",  \n    \"content\": {  \n        \"ingredients\": [\"1 package of Oreos\", \"2 cups of vanilla ice cream\", \"1 cup of whipped cream\"],  \n        \"instructions\": [\"Crush the Oreos.\", \"Mix with ice cream and whipped cream.\", \"Freeze for 4 hours.\", \"Serve.\"]  \n    },  \n    \"date\": \"2024-01-01\"  \n}  \n```  \n\n---\n\n### footer.ejs:  \nI just have my footer where the main thing is the javascript functionality to retrieve the current year.\n\n```html  \n<script>  \n    document.getElementById('current-year').textContent = new Date().getFullYear();  \n</script>  \n```  \n\nThe JavaScript in the footer dynamically retrieves the current year using new Date().getFullYear(). It then updates the text content of the `<span>` with the ID `current-year` to display this year. This ensures the copyright notice is always current without needing manual updates.  \n\n---\n\n### header.ejs:  \nI have put in the navbar, not much technicality here.  \n\n---\n\n### layout.ejs:  \nI used ejs syntax to structure the layout for all the pages using partials for footer and header.  \n\n---\n\n### config file:   \nThe Eleventy configuration code sets up the EJS plugin for templating, allowing the use of EJS syntax in templates. It uses passthrough copies to directly transfer images and CSS files from the src directory to the dist folder without processing. It includes a watch target for the src/css folder to rebuild the site upon changes. The code also contains a before hook to delete the dist folder before each build, ensuring a fresh output. Additionally, it creates a collection of blog posts from a JSON file, sorting them by date in descending order. Finally, it specifies the input and output directories for the build process.  \n\n---\n\n### recipe.ejs:  \nThis EJS template is designed to render a paginated recipe page. It organizes the content by displaying the recipe title, followed by lists of ingredients and instructions. The pagination feature allows users to navigate through multiple pages of recipes, showing a set number of recipes per page. The template includes controls for moving to the previous or next page, as well as links for individual page numbers, with the active page highlighted for clarity. This setup enhances user experience by making it easy to browse through a collection of recipes in an organized manner.  \n\n---\n\n### Sass:  \nSass essentially allows you to use variables within your stylesheets. This makes it much easier to update the design of your page. For example, variable `$textColor` is light pink. I want to use it for ALL text within my website, so I just put in `$textColor` instead of light pink in every tag. And if I ever need to change it, where the variable is declared, that's where I can change it, and it will apply to all my `$textColor` tags.  \n\nAdditionally, mixins are used for positioning content. So I used it to center some content like my header, footer, and my pagination div.",
      "blogPostedDate": "2024-11-30",
      "slug": "assignment-1-documentation",
      "createdAt": "2024-12-13T09:58:49.993Z",
      "updatedAt": "2024-12-13T09:58:49.993Z",
      "publishedAt": "2024-12-13T09:58:50.007Z",
      "media": null
    },
    {
      "id": 4,
      "documentId": "x7klhkusloowpb1nxhu5rk02",
      "postTitle": "Lab 1",
      "blogContent": "1. Templating Engines: EJS, Handlebars, and Pug\nAfter researching various templating engines, I chose to delve into EJS, Handlebars, and Pug due to their frequent mention in forums.\n\n1.1 EJS\nPros\nSyntax: EJS uses a syntax similar to JavaScript, making it easier for both beginners and experienced developers to learn and use.\nCommunity Support: With a large user base, EJS has extensive support in forums, documentation, and contributions, making it likely to find help when issues arise.\nFlexibility: You can easily create dynamic content using variables, conditions, or loops. It supports partials, maintaining a DRY (Don't Repeat Yourself) approach, which aids debugging.\nCons\nManagement: As projects become complex, templates can become hard to follow.\nSpeed: Its flexibility and customization options may lead to resource allocation that can slow down overall runtime.\n1.2 Handlebars.js\nPros\nSyntax: Handlebars features a simple syntax, making it easy to set up, which is suitable for rapid development cycles.\nSeparation of Logic and Presentation: Minimizes complex JavaScript in templates, enhancing comprehension and modification.\nHelpers: Custom reusable functions allow for encapsulation of common functionalities, reducing code length and enabling developers to focus on other aspects.\nCons\nLimited: Handlebars may not be ideal for larger, more complex projects due to its focus on presentation.\nSpeed: It can run slower if templates become too complex.\n1.3 Pug\nPros\nConcise: The syntax is cleaner and more organized, requiring less typing.\nSupports Complex Features: Pug templates can inherit from one another and support loops and conditions, providing consistent layouts.\nCons\nFewer Users: Pug has a smaller user base, leading to less community support and fewer tutorials/documentation, which can complicate problem-solving.\nConclusion\nAfter exploring these three templating engines, I believe EJS aligns best with my goals as a student. While Pug is efficient, it feels intimidating due to the lack of extensive documentation. EJS strikes a good balance between logic and presentation, offering abundant resources that aid in developing self-learning skills compared to Handlebars and Pug.\n\n2. SSG Applications\nChoosing a static site generator (SSG) really depends on the purpose of your project. Here are three popular options I explored: Jekyll, Hugo, and Gatsby.\n\n2.1 Jekyll\nJekyll is one of the most popular SSGs, offering extensive support in terms of documentation and community resources. Built using Ruby, it may deter developers unfamiliar with the language, but it provides ready-made themes that can ease the learning curve. Additionally, Jekyll works well with GitHub Pages, allowing free website hostingâ€”making it a great choice for portfolios, especially for new developers.\n\nCons:\n\nSpeed: Jekyll can be slower to operate, which may prolong the building process and affect production timelines.\n2.2 Hugo\nHugo is known for its fast build times, even for larger websites, making it attractive for developers with tighter deadlines. It allows for improved productivity by enabling a focus on content creation rather than build times.\n\nBuilt using Go, Hugo efficiently handles multiple files and tasks simultaneously, supporting various content types like blogs and portfolios. However, the Go templating system can be challenging for those accustomed to JavaScript or Ruby, and limited plugin support may restrict functionality.\n\n2.3 Gatsby\nGatsby is React-based, appealing to developers familiar with JavaScript. It includes GraphQL support, allowing efficient data pulling from various sources, such as markdown files. This reduces data transfer and improves site performance. Gatsby also offers starter templates for easier project initiation.\n\nCons:\n\nBuild Times: Gatsby can experience slower build times due to data fetching and processing; larger datasets can exacerbate this issue.\n3. 11ty Uses in Our Project\nIn our project using 11ty, we followed the steps outlined in the main \"Get Started\" document.\n\nInstallation: We began by creating a package.json file and installing Eleventy, essential for running 11ty effectively.\nRunning 11ty: We use the terminal and the --serve command to view pages.\nTemplate Creation: We create templates using Markdown and HTML, ensuring all files follow the same structure without code repetition.\nKey Features:\n\nAPI Integration: We used APIs to display dynamic content from external sources, allowing for regular content updates.\nCustom Collections: These organize content based on set criteria, facilitating content management and enabling specific queries without processing unrelated files. They also support dynamic page creation and content filtering.\n4. Front Matter\nFront matter is essentially metadata located at the start of every file within a project, traditionally in a markdown file. It is enclosed within '---' and can include data such as the title, layout, and author.\n\nBenefits:\n\nOrganizes content effectively and allows for dynamic filtering and display.\nMaintains consistent display across a project when using static site generators (SSGs).\nEnhances search engine visibility based on accurate tag organization.\nProvides context for future users, indicating when the file was last updated and by whom.\nSources\nModern Web Development Concepts\nPros and Cons of Popular JavaScript Templating Engines\nHandlebars.js Installation Guide\nEJS Pros and Cons\nA Beginner's Guide to Pug\nBest Static Website Generators\nHugo vs. Jekyll Comparison\nPros and Cons of Using Gatsby\n11ty Configuration Documentation\n11ty Documentation\nYouTube Tutorial\nFront Matter Guide\nUsed ChatGpt as well for fixing grammar and ensuring the layout of my content in this file is consistent :p",
      "blogPostedDate": "2024-11-02",
      "slug": "lab-1",
      "createdAt": "2024-12-13T10:01:15.598Z",
      "updatedAt": "2024-12-13T10:01:15.598Z",
      "publishedAt": "2024-12-13T10:01:15.605Z",
      "media": null
    },
    {
      "id": 6,
      "documentId": "xenv1igzi2dbona2l1bo4jll",
      "postTitle": "First Strapi entry!",
      "blogContent": "Just testing!",
      "blogPostedDate": "2024-12-12",
      "slug": "first-strapi-entry",
      "createdAt": "2024-12-13T10:02:24.286Z",
      "updatedAt": "2024-12-13T10:02:24.286Z",
      "publishedAt": "2024-12-13T10:02:24.293Z",
      "media": [
        {
          "id": 8,
          "documentId": "hlvvy6c2qa973wru4pgm6fma",
          "name": "f99bad635fde31ea96dfb8f4449eac67.jpg",
          "alternativeText": null,
          "caption": null,
          "width": 562,
          "height": 365,
          "formats": {
            "thumbnail": {
              "name": "thumbnail_f99bad635fde31ea96dfb8f4449eac67.jpg",
              "hash": "thumbnail_f99bad635fde31ea96dfb8f4449eac67_bfe2219e05",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 240,
              "height": 156,
              "size": 6.41,
              "sizeInBytes": 6411,
              "url": "/uploads/thumbnail_f99bad635fde31ea96dfb8f4449eac67_bfe2219e05.jpg"
            },
            "small": {
              "name": "small_f99bad635fde31ea96dfb8f4449eac67.jpg",
              "hash": "small_f99bad635fde31ea96dfb8f4449eac67_bfe2219e05",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 500,
              "height": 325,
              "size": 24.71,
              "sizeInBytes": 24713,
              "url": "/uploads/small_f99bad635fde31ea96dfb8f4449eac67_bfe2219e05.jpg"
            }
          },
          "hash": "f99bad635fde31ea96dfb8f4449eac67_bfe2219e05",
          "ext": ".jpg",
          "mime": "image/jpeg",
          "size": 31.43,
          "url": "/uploads/f99bad635fde31ea96dfb8f4449eac67_bfe2219e05.jpg",
          "previewUrl": null,
          "provider": "local",
          "provider_metadata": null,
          "createdAt": "2024-12-13T10:02:08.130Z",
          "updatedAt": "2024-12-13T10:02:08.130Z",
          "publishedAt": "2024-12-13T10:02:08.130Z"
        }
      ]
    },
    {
      "id": 8,
      "documentId": "mk6bv2rqmzp01ockutxg2r4h",
      "postTitle": "Lab 2",
      "blogContent": "Headless CMS Overview\nI was somewhat aware of headless CMS's through WIX. After exploring various options, I understand why many people choose to use CMSs. They are convenient for content creators who aren't keen on learning programming, as they allow easy management of website content without the need for technical skills. For this project, I researched Strapi, Contentful, Prismic, Sanity, and Ghost.\n\nStrapi\nStrapi is known for its developer-friendly open-source nature. It is fully customizable and allows you to self-host. It also offers both RESTful and GraphQL APIs for content delivery, making it a popular choice among developers.\n\nMy Experience with Strapi:\nI chose Strapi for its easy integration with Visual Studio. Initially, downloading it was confusing due to conflicting information, but I decided to follow the official documentation instead of video tutorials. Eventually, I managed to launch the admin page, where I created a collection and defined the type of content to be managed by that collection.\n\n\n\nI had several options for defining input types, and I chose a blog-style setup, selecting text for the title, content, and author, a date type, and a media type to allow multiple pieces of media.\n\nAfter filling in two entries and publishing them, I checked Visual Studio and saw the schema, which displayed how the content types were assigned.\n\n\n\nAdvantages of Strapi:\nFlexibility: Open-source, self-hosted, and fully customizable.\nDeveloper-Friendly: Easy API setup with good integration with databases.\nRole-Based Access Control: Ability to define user roles and permissions.\nOverall, once the setup was completed, it was smooth sailing to create entries, collections, and assign their data types. Plus, the free trial did not require credit card information, which was a nice bonus.\n\nContentful\nContentful is a SaaS-based, API-first CMS designed for scalability and enterprise needs. It features a user-friendly dashboard that enables teams to organize and deliver content across multiple digital platforms.\n\nAdvantages of Contentful:\nScalability: Supports complex content hierarchies, making it ideal for large-scale projects.\nAPI-First Approach: Includes both REST and GraphQL APIs for easy integration.\nUser-Friendly Interface: Simplifies content creation for non-technical users.\nContentful is great for teams that need a scalable CMS solution with multi-user access. It's ideal for content creators who are not familiar with programming but still need an efficient way to manage content.\n\nMy Experience with Contentful\nI chose to use Contentful as well, primarily because it promotes itself as a SaaS-based application. Iâ€™ve seen ads for it before, so I thought it would be a good idea to give it a try.\n\nDuring the setup process, I encountered some challenges, particularly with GitHub repositories. I was initially hesitant to link my GitHub account, but it seemed necessary to get everything working properly. While this wasnâ€™t a major disadvantage, it did feel a bit inconvenient at first. On the positive side, being able to access my content through another platform can be helpful in case there are issues with accessing it through Contentful.\n\nOne thing that surprised me was when Contentful created and pushed random content to my GitHub account when I returned to the platform. It caught me off guard for a moment, I got scared someone already got access to my GitHub lol. However, after a bit of thought, I realized that I had chosen a template, which is why it pushed a bunch of entries automatically.\n\n\n\nWhile using the template, I found the process a bit confusing. Instead of building content step-by-step from scratch, I had to sift through the template to figure out where everything went. This wasnâ€™t necessarily a negative aspect, but it did make the process a bit more challenging.\n\n\n\n\nOne feature that stood out to me was Contentfulâ€™s API-first approach. It allows you to integrate the CMS with various platforms using their well-documented REST and GraphQL APIs. This flexibility made it easy to connect Contentful to other services, and it gave me confidence that the platform could scale with my project as it grows.\n\nAdditionally, I was impressed by Contentfulâ€™s scalability. It supports complex content hierarchies, making it suitable for anything from a small blog to a large-scale digital platform. I also appreciated how it allows multiple users to access and manage content simultaneously, which is a great advantage for team collaboration.\n\nOverall, I enjoyed how Contentful streamlined the content management process, offering both structure and flexibility. Itâ€™s accessible to non-developers, but also scalable enough for more complex projects.\n\nSanity\nSanity is a headless CMS that's especially great for developers, offering flexibility and customization in content modeling.\n\nAdvantages of Sanity:\nReal-Time Collaboration: Allows multiple users to work on content simultaneously.\nAPI-First: Easy content delivery across platforms like websites and apps.\nHighly Customizable: Offers flexibility in building content structures and interfaces.\nDisadvantages of Sanity:\nRequires Developer Skills: Not suitable for users without coding knowledge.\nSmaller Plugin Ecosystem: Fewer pre-made solutions than other CMS platforms.\nLearning Curve: Can be tough to learn for beginners.\nSanity is newer (launched in 2015) but has rapidly gained popularity due to its modern design and flexibility.\n\nPrismic\nPrismic offers flexibility and is well-suited for projects requiring content management without being tied to a specific front-end technology.\n\nAdvantages of Prismic:\nFlexibility: Compatible with various front-end technologies like React and Vue.\nEase of Use: Simple for content creators with an intuitive interface.\nReusability with Slices: Allows creation of reusable content blocks.\nScheduling and Version Control: Enables scheduling and tracking of content changes.\nLocalization: Supports multi-language content management.\nDisadvantages of Prismic:\nLearning Curve: Setting up custom types or working with the API can be challenging for beginners.\nCost: Can be expensive for larger teams or advanced features.\nPrismic has been around since 2013 and offers a solid choice for flexible, easy-to-use content management across different platforms.\n\nMy Experience with Prismic\nI decided to give Prismic a try because of its flexibility and ease of use. Prismic is a headless CMS that offers a lot of freedom in terms of front-end technology, making it a versatile option for various projects. One of the things that really stood out to me was its slice machine feature. It allows you to create reusable content blocks, which you can easily mix and match to build different pages. This flexibility made content management more streamlined and efficient.\n\nSetting up Prismic was straightforward. I found the user interface to be intuitive, which is great fo content creators who donâ€™t have a technical background. It was easy to create custom content types, and I could quickly start adding content without feeling overwhelmed. This makes Prismic a great option for teams with diverse skill sets.\n\nOne feature that impressed me was Prismicâ€™s scheduling and version control. The ability to schedule content for future publishing and revert to previous versions of content if needed is a huge plus, especially for teams that need to collaborate on content creation and updates. It made me feel more in control of the content workflow.\n\nPrismic also handles localization very well, which is a great feature for projects targeting a global audience. It makes managing multi-language content a lot easier, ensuring that content is accessible to users around the world.\n\nHowever, there were a couple of challenges. While Prismic is generally user-friendly, there is a learning curve when it comes to setting up custom content types and working with the API. It took me a little while to get comfortable with the nuances of the system. Additionally, Prismic can get pretty expensive for larger teams or when you need access to more advanced features.\n\nDespite these challenges, Prismic was a great choice for my project. It combines flexibility, ease of use, and powerful features like slice machine, scheduling, and version control, which made it a strong candidate for managing content across platforms. Itâ€™s definitely a solid option if youâ€™re looking for a headless CMS that is both user-friendly and scalable.\n\n\n\nGhost\nGhost is a CMS optimized for blogging and content publishing, offering a clean, fast platform for online writers.\n\nAdvantages of Ghost:\nOptimized for Publishing: Great for bloggers, with a minimalist design for efficient content creation.\nPerformance: Built on Node.js, ensuring fast load times and better SEO.\nMarkdown Support: Ideal for writers who prefer a distraction-free writing environment.\nMembership and Subscription: Supports direct monetization through built-in membership features.\nSimple Setup: Easy to set up with an option for managed hosting.\nDisadvantages of Ghost:\nLimited Use Cases: Best suited for blogs or content publishing, not complex websites.\nLimited Extensions: Smaller plugin ecosystem than platforms like WordPress or Strapi.\nFocus on Simplicity: Its simplicity may limit customization for advanced needs.\nGhost, launched in 2013, remains a popular choice for bloggers and content publishers due to its performance and ease of use.\n\nConclusion\nEach CMS offers its own set of advantages and limitations, making them suited to different needs and use cases. Strapi is ideal for developers looking for flexibility, while Contentful is perfect for teams requiring scalability. Sanity offers real-time collaboration for developers, and Prismic provides a simple solution for easy content management. Ghost is a great choice for bloggers, offering excellent performance and simplicity.\n\nI do think Strapi is what I will choose for my Assignment 1 because it seems the best in terms of having easy connectivity with visual studio, as well as simple interface. I found its documentation to be a bit more clean than the other two.",
      "blogPostedDate": "2024-12-14",
      "slug": "lab-2",
      "createdAt": "2024-12-13T10:06:06.046Z",
      "updatedAt": "2024-12-13T10:06:06.046Z",
      "publishedAt": "2024-12-13T10:06:06.055Z",
      "media": [
        {
          "id": 10,
          "documentId": "rxhgn3pkbx93k379nmxs7ier",
          "name": "strapi1.jpg",
          "alternativeText": null,
          "caption": null,
          "width": 940,
          "height": 456,
          "formats": {
            "thumbnail": {
              "name": "thumbnail_strapi1.jpg",
              "hash": "thumbnail_strapi1_b1a7e26bb2",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 245,
              "height": 119,
              "size": 2.75,
              "sizeInBytes": 2752,
              "url": "/uploads/thumbnail_strapi1_b1a7e26bb2.jpg"
            },
            "medium": {
              "name": "medium_strapi1.jpg",
              "hash": "medium_strapi1_b1a7e26bb2",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 750,
              "height": 364,
              "size": 13.59,
              "sizeInBytes": 13587,
              "url": "/uploads/medium_strapi1_b1a7e26bb2.jpg"
            },
            "small": {
              "name": "small_strapi1.jpg",
              "hash": "small_strapi1_b1a7e26bb2",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 500,
              "height": 243,
              "size": 7.88,
              "sizeInBytes": 7880,
              "url": "/uploads/small_strapi1_b1a7e26bb2.jpg"
            }
          },
          "hash": "strapi1_b1a7e26bb2",
          "ext": ".jpg",
          "mime": "image/jpeg",
          "size": 18.73,
          "url": "/uploads/strapi1_b1a7e26bb2.jpg",
          "previewUrl": null,
          "provider": "local",
          "provider_metadata": null,
          "createdAt": "2024-12-13T10:05:57.146Z",
          "updatedAt": "2024-12-13T10:05:57.146Z",
          "publishedAt": "2024-12-13T10:05:57.146Z"
        },
        {
          "id": 11,
          "documentId": "fsjjh4vyswpxu4850zbievmd",
          "name": "strapi2.jpg",
          "alternativeText": null,
          "caption": null,
          "width": 940,
          "height": 499,
          "formats": {
            "thumbnail": {
              "name": "thumbnail_strapi2.jpg",
              "hash": "thumbnail_strapi2_6da45e6dd6",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 245,
              "height": 130,
              "size": 3.96,
              "sizeInBytes": 3963,
              "url": "/uploads/thumbnail_strapi2_6da45e6dd6.jpg"
            },
            "medium": {
              "name": "medium_strapi2.jpg",
              "hash": "medium_strapi2_6da45e6dd6",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 750,
              "height": 398,
              "size": 26.32,
              "sizeInBytes": 26315,
              "url": "/uploads/medium_strapi2_6da45e6dd6.jpg"
            },
            "small": {
              "name": "small_strapi2.jpg",
              "hash": "small_strapi2_6da45e6dd6",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 500,
              "height": 265,
              "size": 13.45,
              "sizeInBytes": 13448,
              "url": "/uploads/small_strapi2_6da45e6dd6.jpg"
            }
          },
          "hash": "strapi2_6da45e6dd6",
          "ext": ".jpg",
          "mime": "image/jpeg",
          "size": 37.87,
          "url": "/uploads/strapi2_6da45e6dd6.jpg",
          "previewUrl": null,
          "provider": "local",
          "provider_metadata": null,
          "createdAt": "2024-12-13T10:05:57.164Z",
          "updatedAt": "2024-12-13T10:05:57.164Z",
          "publishedAt": "2024-12-13T10:05:57.164Z"
        },
        {
          "id": 12,
          "documentId": "jgjvlo3ibhmqstu4urve9bqh",
          "name": "Prismo1.jpg",
          "alternativeText": null,
          "caption": null,
          "width": 1876,
          "height": 903,
          "formats": {
            "thumbnail": {
              "name": "thumbnail_Prismo1.jpg",
              "hash": "thumbnail_Prismo1_9bcfe7b2bb",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 245,
              "height": 118,
              "size": 3.91,
              "sizeInBytes": 3909,
              "url": "/uploads/thumbnail_Prismo1_9bcfe7b2bb.jpg"
            },
            "large": {
              "name": "large_Prismo1.jpg",
              "hash": "large_Prismo1_9bcfe7b2bb",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 1000,
              "height": 481,
              "size": 39.33,
              "sizeInBytes": 39326,
              "url": "/uploads/large_Prismo1_9bcfe7b2bb.jpg"
            },
            "medium": {
              "name": "medium_Prismo1.jpg",
              "hash": "medium_Prismo1_9bcfe7b2bb",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 750,
              "height": 361,
              "size": 25.09,
              "sizeInBytes": 25088,
              "url": "/uploads/medium_Prismo1_9bcfe7b2bb.jpg"
            },
            "small": {
              "name": "small_Prismo1.jpg",
              "hash": "small_Prismo1_9bcfe7b2bb",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 500,
              "height": 240,
              "size": 12.19,
              "sizeInBytes": 12194,
              "url": "/uploads/small_Prismo1_9bcfe7b2bb.jpg"
            }
          },
          "hash": "Prismo1_9bcfe7b2bb",
          "ext": ".jpg",
          "mime": "image/jpeg",
          "size": 111.01,
          "url": "/uploads/Prismo1_9bcfe7b2bb.jpg",
          "previewUrl": null,
          "provider": "local",
          "provider_metadata": null,
          "createdAt": "2024-12-13T10:05:57.203Z",
          "updatedAt": "2024-12-13T10:05:57.203Z",
          "publishedAt": "2024-12-13T10:05:57.204Z"
        },
        {
          "id": 13,
          "documentId": "ws6o04d1891lfnlhr8hh9ojj",
          "name": "contentful3.jpg",
          "alternativeText": null,
          "caption": null,
          "width": 1906,
          "height": 920,
          "formats": {
            "thumbnail": {
              "name": "thumbnail_contentful3.jpg",
              "hash": "thumbnail_contentful3_3d9e062a92",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 245,
              "height": 118,
              "size": 3.34,
              "sizeInBytes": 3335,
              "url": "/uploads/thumbnail_contentful3_3d9e062a92.jpg"
            },
            "large": {
              "name": "large_contentful3.jpg",
              "hash": "large_contentful3_3d9e062a92",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 1000,
              "height": 483,
              "size": 32.52,
              "sizeInBytes": 32515,
              "url": "/uploads/large_contentful3_3d9e062a92.jpg"
            },
            "medium": {
              "name": "medium_contentful3.jpg",
              "hash": "medium_contentful3_3d9e062a92",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 750,
              "height": 362,
              "size": 20.14,
              "sizeInBytes": 20141,
              "url": "/uploads/medium_contentful3_3d9e062a92.jpg"
            },
            "small": {
              "name": "small_contentful3.jpg",
              "hash": "small_contentful3_3d9e062a92",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 500,
              "height": 241,
              "size": 10.93,
              "sizeInBytes": 10931,
              "url": "/uploads/small_contentful3_3d9e062a92.jpg"
            }
          },
          "hash": "contentful3_3d9e062a92",
          "ext": ".jpg",
          "mime": "image/jpeg",
          "size": 86.49,
          "url": "/uploads/contentful3_3d9e062a92.jpg",
          "previewUrl": null,
          "provider": "local",
          "provider_metadata": null,
          "createdAt": "2024-12-13T10:05:57.466Z",
          "updatedAt": "2024-12-13T10:05:57.466Z",
          "publishedAt": "2024-12-13T10:05:57.467Z"
        },
        {
          "id": 14,
          "documentId": "qxbuxona8ydjq6bctgnrszgo",
          "name": "contentful.jpg",
          "alternativeText": null,
          "caption": null,
          "width": 1902,
          "height": 896,
          "formats": {
            "thumbnail": {
              "name": "thumbnail_contentful.jpg",
              "hash": "thumbnail_contentful_e3a7f5ea57",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 245,
              "height": 116,
              "size": 5.55,
              "sizeInBytes": 5551,
              "url": "/uploads/thumbnail_contentful_e3a7f5ea57.jpg"
            },
            "large": {
              "name": "large_contentful.jpg",
              "hash": "large_contentful_e3a7f5ea57",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 1000,
              "height": 471,
              "size": 56.4,
              "sizeInBytes": 56398,
              "url": "/uploads/large_contentful_e3a7f5ea57.jpg"
            },
            "medium": {
              "name": "medium_contentful.jpg",
              "hash": "medium_contentful_e3a7f5ea57",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 750,
              "height": 353,
              "size": 34.66,
              "sizeInBytes": 34658,
              "url": "/uploads/medium_contentful_e3a7f5ea57.jpg"
            },
            "small": {
              "name": "small_contentful.jpg",
              "hash": "small_contentful_e3a7f5ea57",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 500,
              "height": 236,
              "size": 18.2,
              "sizeInBytes": 18201,
              "url": "/uploads/small_contentful_e3a7f5ea57.jpg"
            }
          },
          "hash": "contentful_e3a7f5ea57",
          "ext": ".jpg",
          "mime": "image/jpeg",
          "size": 149.84,
          "url": "/uploads/contentful_e3a7f5ea57.jpg",
          "previewUrl": null,
          "provider": "local",
          "provider_metadata": null,
          "createdAt": "2024-12-13T10:05:57.478Z",
          "updatedAt": "2024-12-13T10:05:57.478Z",
          "publishedAt": "2024-12-13T10:05:57.478Z"
        },
        {
          "id": 15,
          "documentId": "b3bnbzwfjfypxvanbc8y1pev",
          "name": "contentful2.jpg",
          "alternativeText": null,
          "caption": null,
          "width": 1906,
          "height": 920,
          "formats": {
            "thumbnail": {
              "name": "thumbnail_contentful2.jpg",
              "hash": "thumbnail_contentful2_40530c9738",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 245,
              "height": 118,
              "size": 4.34,
              "sizeInBytes": 4341,
              "url": "/uploads/thumbnail_contentful2_40530c9738.jpg"
            },
            "large": {
              "name": "large_contentful2.jpg",
              "hash": "large_contentful2_40530c9738",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 1000,
              "height": 483,
              "size": 40.51,
              "sizeInBytes": 40508,
              "url": "/uploads/large_contentful2_40530c9738.jpg"
            },
            "medium": {
              "name": "medium_contentful2.jpg",
              "hash": "medium_contentful2_40530c9738",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 750,
              "height": 362,
              "size": 25.85,
              "sizeInBytes": 25853,
              "url": "/uploads/medium_contentful2_40530c9738.jpg"
            },
            "small": {
              "name": "small_contentful2.jpg",
              "hash": "small_contentful2_40530c9738",
              "ext": ".jpg",
              "mime": "image/jpeg",
              "path": null,
              "width": 500,
              "height": 241,
              "size": 13.13,
              "sizeInBytes": 13131,
              "url": "/uploads/small_contentful2_40530c9738.jpg"
            }
          },
          "hash": "contentful2_40530c9738",
          "ext": ".jpg",
          "mime": "image/jpeg",
          "size": 112.84,
          "url": "/uploads/contentful2_40530c9738.jpg",
          "previewUrl": null,
          "provider": "local",
          "provider_metadata": null,
          "createdAt": "2024-12-13T10:05:57.499Z",
          "updatedAt": "2024-12-13T10:05:57.499Z",
          "publishedAt": "2024-12-13T10:05:57.499Z"
        }
      ]
    },
    {
      "id": 10,
      "documentId": "dh8juu0i1c60wnft5z8qcy9u",
      "postTitle": "Assignment 2 Documentation",
      "blogContent": "I started off by setting up my Strapi account. The process was pretty okay. When I reached the point of populating my JSON files through fetching, it was difficult because nothing would load. When I put the link in my browser, it would populate the fields with errors. So, I had to look through and found out that within the settings, under roles, you need to publicize the find and findOne for your collections to make them visible and accessible to the public. I added a custom field \"slug\" from a Reddit post I found, which will be used for rendering my Lab 1, Lab 2, and Assignment 1 documentation, as well as this documentation.\n\nNext, I set up my `blogs.ejs` to follow the same format as my `recipe.ejs`, which has working pagination for convenience. All the pagination logic is the same throughout the project. The new bit was the alias I used for convenience, and the URL for the image.\n\nThis function:\n```ejs\n<% if (blog.media && blog.media.url) { %>\n    <img src=\"<%= blog.media.url %>\" alt=\"<%= blog.media.alternativeText || blog.postTitle %>\" />\n<% } %>\n```\nFirst checks if the specific post has an image attached to it (the name of the field is media, that's why it is `blog.media.url`). My images were rendering, but I changed something and did not notice it messed with my images, so it was difficult to retrace and check what I had changed. It turns out it was just adding \"https\" before the URL because it works as a relative URL.\n\nThe main work is in my `fetch-strapi.mjs` and `rec-fetch-strapi.mjs` files. I chose to separate these two because it made it more organized for me in terms of understanding. I'm not sure if it would work within the same file, so I just chose to separate them for debugging.\n\n fetch-strapi.mjs:\nI first imported modules, especially `node-fetch`, to help populate my JSON files with CMS content.\n\nThen, my `fetchStrapiContent` function is an asynchronous function that fetches data from Strapi using my pagination logic. The API URL is for requesting the data, and for my images, I used `populate=media`.\n\nSince I wanted one post per page, I set up the `pageSize` as 1 and `currentPage` just to keep track of which page, as it can help with filtering and getting more data for the previous and next links.\n\nThe actual loop says that if there is more data, fetch the current page and how many items, which is then converted to JSON.\n\nThe data is added into an array and increments with each post fetched. Once the data length reaches 0, it will stop my loop.\n\nTo save the data to my file:\n```javascript\nconst outputDir = path.join(process.cwd(), 'src', '_data');\nif (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir, { recursive: true });\nfs.writeFileSync(path.join(outputDir, 'blogs.json'), JSON.stringify({ data: allBlogs }, null, 2));\n```\nI first showed where to store it in my `src` and `_Data`. Then, for validation (because I donâ€™t want it to throw errors or create new folders), I made it check if the `_Data` folder exists. I did add a line to create `_Data` if it's not there, but I think in the final project, Iâ€™ll remove it because I donâ€™t want any typos creating new folders and making a mess.\n\nLastly, the `writeFileSync` writes the collected `allBlogs` data and converts it into JSON.\n\nJust for debugging, I added a `console.log`, and finally, it calls my `fetchStrapiContent` function.\n\n My `rec-strapi` function follows a similar format, but filtering was added to this.\nFirstly, in my recipe JSON from the last assignment, I added a field for `type`, which I wanted to use for filtering. This will take the \"sweet\" and \"savory\" types and push them to their respective JSON files. So, we have three JSON files. Itâ€™s not the most effective way in terms of data, but it worked somewhat, so I chose this path.\n\nI have a form for users to click \"sweet\" or \"savory\" and submit. If this filter isn't used, it will just show all the recipes.\n\nThis is the main part in this file:\n```javascript\nif (recipeType) {\n  apiUrl += `&filters[type][$eq]=${recipeType}`;\n}\n```\nIn the future, I can add more types and multi-select each recipe. It acts as a tag. The `recipeType` is either 1 or 2 in this, and each is put in its own JSON. Once the submit is clicked, my intent was for it to load a separate page or replace that page with the filtered content. So far, it has not worked.\n\n",
      "blogPostedDate": "2024-12-20",
      "slug": "assignment-2-documentation",
      "createdAt": "2024-12-13T10:06:55.287Z",
      "updatedAt": "2024-12-13T10:06:55.287Z",
      "publishedAt": "2024-12-13T10:06:55.296Z",
      "media": null
    }
  ]
}